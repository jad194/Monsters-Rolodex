{"version":3,"sources":["components/Card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wUAIaA,EAAO,SAACC,GAAD,OAEZ,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,KAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCLjBC,EAAW,SAAAR,GAAK,OAErB,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLlBO,G,YAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAaF,MCmCFG,G,wDArCb,aACC,IAAD,8BACE,gBAeFH,aAAe,SAAAI,GACb,EAAKC,SAAU,CAAEC,YAAaF,EAAEG,OAAOC,SAdvC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALjB,E,qDASA,WACC,IAAD,OACEI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO3C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQG,KAAKyB,cAAcC,SAAUb,EAAYY,kBAGnD,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAiBe,KAAKf,eAC/D,cAAC,EAAD,CAAUJ,SAAWoB,W,GAjCXI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d08edf52.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport \"./card.styles.css\"\r\n\r\nexport const Card = (props) => \r\n(\r\n        <div className = \"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"\"/>\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n)","import React from \"react\";\r\nimport './card-list.styles.css';\r\nimport { Card } from \"../Card/card.component\";\r\n\r\nexport const CardList = props => \r\n(\r\n        <div className=\"card-list\">\r\n        {\r\n            props.monsters.map(monster => \r\n            <Card key={monster.id} monster={monster} />)\r\n        }\r\n        </div>\r\n)\r\n","import { props } from 'bluebird';\r\nimport React from 'react';\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n    className=\"search\"\r\n    type='search'\r\n    placeholder={placeholder}\r\n    onChange = { handleChange } />\r\n)","import { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport './App.css';\n\nclass App extends Component \n{\n  constructor()\n  {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount()\n  {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json() )\n    .then(users => this.setState({ monsters: users }) )\n  }\n\n  handleChange = e => {\n    this.setState( { searchField: e.target.value } )\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes( searchField.toLowerCase() )\n      );\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox placeholder=\"search monsters\" handleChange = { this.handleChange } />\n        <CardList monsters={ filteredMonsters }></CardList>\n      </div>\n    )\n  }\n} \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}